# generated by datamodel-codegen:
#   filename:  catalog.yml
#   timestamp: 2024-04-17T07:15:03+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field


class ChunkingStrategy(Enum):
    split_by_html_header = 'split_by_html_header'
    split_by_html_section = 'split_by_html_section'
    split_by_character = 'split_by_character'
    split_code = 'split_code'
    markdown_header_text_splitter = 'markdown_header_text_splitter'
    recursively_split_json = 'recursively_split_json'
    recursiverly_split_by_character = 'recursiverly_split_by_character'
    semantic_chunking = 'semantic_chunking'
    split_by_tokens = 'split_by_tokens'


class HeadersToSplitOnItem(BaseModel):
    __root__: List[Any]


class SplitterConfig(BaseModel):
    headers_to_split_on: Optional[List[HeadersToSplitOnItem]] = Field(
        None,
        description='list of tuples of headers we want to track mapped to (arbitrary) keys for metadata. Allowed header values: h1, h2, h3, h4, h5, h6',
        min_items=1,
    )


class Advanced(BaseModel):
    chunking_strategy: Optional[ChunkingStrategy] = 'recursiverly_split_by_character'
    splitter_config: Optional[SplitterConfig] = None


class ReadSyncMode(Enum):
    FULL_REFRESH = 'FULL_REFRESH'
    INCREMENTAL = 'INCREMENTAL'


class WriteSyncMode(Enum):
    APPEND = 'APPEND'
    UPSERT = 'UPSERT'
    REPLACE = 'REPLACE'


class DatDocumentStream(BaseModel):
    class Config:
        extra = 'allow'

    name: str = Field(..., description='The name of the document stream.')
    namespace: Optional[str] = Field(
        None, description='The namespace the data is associated with.'
    )
    json_schema: Optional[Dict[str, Any]] = Field(
        None, description='The JSON schema for the document stream.'
    )
    read_sync_mode: Optional[ReadSyncMode] = Field(
        'INCREMENTAL',
        description='A list of supported sync modes for the stream while reading.',
    )
    write_sync_mode: Optional[WriteSyncMode] = Field(
        'APPEND',
        description='A list of supported sync modes for the stream while writing.',
    )
    cursor_field: Optional[str] = Field(
        None,
        description='The path to the field used to determine if a record is new or modified.\nREQUIRED for INCREMENTAL sync mode.',
    )


class Crawler(DatDocumentStream):
    name: Optional[str] = 'crawler'
    namespace: Optional[str] = Field(
        None, description='namespace the data is associated with'
    )
    advanced: Optional[Advanced] = Field(
        None, description='Additional optional settings'
    )


class WebCrawlerCatalog(BaseModel):
    document_streams: List[Crawler]
